{
	"info": {
		"_postman_id": "c67e8eeb-5bc1-4e3e-8450-e57d1ee9ad1e",
		"name": "Project Reports",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DNA",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Project DNA  Mito Report wrong search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "850a176d-69bf-4d81-bbc5-3f726f391967",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"count must be zero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf718202-1de4-4de4-8e59-8ebef4108888",
										"exec": [
											"pm.globals.set(\"page\",1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"mito\",\r\n    \"p1\":[\"123\"]\r\n   \r\n  \r\n    \r\n    \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/dna",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"dna"
									],
									"query": [
										{
											"key": "type[]",
											"value": "mito",
											"disabled": true
										},
										{
											"key": "an[]",
											"value": "CIL+2003-116",
											"disabled": true
										},
										{
											"key": "p1[]",
											"value": "G-01",
											"disabled": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Project DNA Ystr Report wrong search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "707b0f53-5683-40bb-a47a-331dc950abea",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"count must be zero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "736f8bf2-7dba-4b99-a642-b73a9bf12f60",
										"exec": [
											"pm.globals.set(\"page\",1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"ystre\",\r\n    \"an\": [\"788\"]\r\n   \r\n  \r\n    \r\n    \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/dna",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"dna"
									],
									"query": [
										{
											"key": "type[]",
											"value": "mito",
											"disabled": true
										},
										{
											"key": "an[]",
											"value": "CIL+2003-116",
											"disabled": true
										},
										{
											"key": "p1[]",
											"value": "G-01",
											"disabled": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Project DNA Austr Report wrong search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4d57c52-c84a-4241-ba0d-8699bb1004d8",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"count must be zero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "03d94a74-4ffd-4393-b99b-2213d8457684",
										"exec": [
											"pm.globals.set(\"page\",1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"zzz\",\r\n    \"an\":[\"xcv\"]\r\n    \r\n    \r\n    \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/dna",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"dna"
									],
									"query": [
										{
											"key": "type[]",
											"value": "mito",
											"disabled": true
										},
										{
											"key": "an[]",
											"value": "CIL+2003-116",
											"disabled": true
										},
										{
											"key": "p1[]",
											"value": "G-01",
											"disabled": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Project DNA Reports wrong project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0612ae4d-80c5-441e-98ee-bfc8febe4c0f",
										"exec": [
											"// This negative test will loop through diffrent unauthorized project values and checks if the data being returned or not. It will also check the unauthorized message.\r",
											"\r",
											"var project = pm.globals.get(\"project\");\r",
											"\r",
											"if (project.length > 0) {\r",
											"    postman.setNextRequest(\"Project DNA Reports wrong project\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"project\")\r",
											"   \r",
											"}\r",
											"pm.test(\"Check unauthorized message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.data).to.include(\"Not Authorized to view Project data\");\r",
											"   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1d07f5d-7d1b-48bf-86d8-58afeae59cd4",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"\r",
											"\r",
											"var project = pm.globals.get(\"project\")\r",
											"\r",
											"\r",
											"if(!project){\r",
											"      project = pm.globals.get(\"invalidproject\");\r",
											"}\r",
											"\r",
											"var currentproject = project.shift();\r",
											"\r",
											"console.log(currentproject)\r",
											"pm.globals.set(\"projectid\", currentproject);\r",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"mito\",\r\n    \"p1\": [\"G-01\"]\r\n   \r\n  \r\n    \r\n    \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{projectid}}/dna?page={{page}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{projectid}}",
										"dna"
									],
									"query": [
										{
											"key": "type[]",
											"value": "mito",
											"disabled": true
										},
										{
											"key": "an[]",
											"value": "CIL+2003-116",
											"disabled": true
										},
										{
											"key": "p1[]",
											"value": "G-01",
											"disabled": true
										},
										{
											"key": "page",
											"value": "{{page}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Project DNA  Reports wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f1e6320f-bee8-45fc-8902-ad88c3d312b7",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "acf30b75-e4f2-410b-a739-0c32c37a99b8",
										"exec": [
											"// This negative test will loop through diffrent invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Project DNA  Reports wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"   // pm.response.to.not.be.Body;\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"type\": \"mito\",\r\n    \"an\": [\"CIL 2003-116\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/dna",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"dna"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project DNA Mito Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6e24e08-5a68-4def-85f3-3181217f3030",
								"exec": [
									"\r",
									"// This request will check the data coming from project DNA Mito report based on search criteria selected . This request also loops through all the available pages.\r",
									"\r",
									"pm.test(\"Display the selection criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Criteria slection: \"  + jsonData.criteriaSelection] = true;\r",
									"   \r",
									" \r",
									"});\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Total Count: \"  + jsonData.meta.total] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display current page\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    tests[\" From: \"  + jsonData.meta.from] = true;\r",
									"    tests[\" To: \"  +jsonData.meta.to] = true;\r",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;\r",
									"   \r",
									"});\r",
									"\r",
									" \r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(response.links.next !== null) {\r",
									"    var str = response.links.next\r",
									"    console.log(str)\r",
									"    pm.globals.set(\"page\", str.split('=', 2)[1]);\r",
									"    postman.setNextRequest(\"Project DNA Mito Report\");}\r",
									"\r",
									"pm.test(\"Check returned dnas fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"se_id\",\"org_id\",\"project_id\",\"lab_id\",\"external_case_id\",\"priority\",\"sample_number\",\"mito_sequence_number\",\"mito_sequence_subgroup\",\"mito_sequence_similar\",\"mito_match_count\",\"mito_total_count\",\"mito_receive_date\",\"mito_haplogroup_id\",\"analysis_type_id\",\"mito_results_confidence\",\"mito_method\",\"external_sample_number\",\"dispostion_of_evidence\",\"mito_confirmed_regions\",\"mito_base_pairs\",\"locus\",\"mito_num_loci\",\"mito_mcc_date\",\"additional_testing\",\"sb_id\",\"priority_date\",\"btb_request_date\",\"btb_results_date\",\"disposition\",\"sample_condition\",\"weight_sample_remaining\",\"mito_request_date\",\"mito_polymorphisms\",\"mito_fasta_sequence\",\"mito_haplosubgroup\",\"austr_method\",\"austr_request_date\",\"austr_receive_date\",\"austr_results_confidence\",\"austr_sequence_number\",\"austr_sequence_subgroup\",\"austr_sequence_similar\",\"austr_match_count\",\"austr_total_count\",\"austr_num_loci\",\"austr_loci\",\"austr_mcc_date\",\"ystr_method\",\"ystr_request_date\",\"ystr_receive_date\",\"ystr_results_confidence\",\"ystr_sequence_number\",\"ystr_sequence_subgroup\",\"ystr_sequence_similar\",\"ystr_match_count\",\"ystr_total_count\",\"ystr_num_loci\",\"ystr_loci\",\"ystr_haplogroup\",\"ystr_haplosubgroup\",\"ystr_mcc_date\",\"resample_indicator\",\"notes\",\"uuid\",\"user_id\",\"custom_field_1\",\"custom_field_2\",\"custom_field_3\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "59449457-8474-4438-9697-9f49da4cd82b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"mito\",\r\n    \"an\": [\"CIL 2003-116\"]\r\n    \r\n    \r\n  \r\n    \r\n    \r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/dna?page={{page}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"dna"
							],
							"query": [
								{
									"key": "type[]",
									"value": "mito",
									"disabled": true
								},
								{
									"key": "an[]",
									"value": "CIL+2003-116",
									"disabled": true
								},
								{
									"key": "p1[]",
									"value": "G-01",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{page}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Project DNA Ystr Report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "abcdeb63-0604-48ab-91c3-51aa5df7a930",
								"exec": [
									"pm.globals.set(\"page\",1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66d1f7d8-a39a-4038-b0ba-f54bfa1ef796",
								"exec": [
									"\r",
									"// This request will check the data coming from project DNA Ystr report based on search criteria selected . This request also loops through all the available pages.\r",
									"\r",
									"pm.test(\"Display the selection criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Criteria slection: \"  + jsonData.criteriaSelection] = true;\r",
									"   \r",
									" \r",
									"});\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Total Count: \"  + jsonData.meta.total] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display current page\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    tests[\" From: \"  + jsonData.meta.from] = true;\r",
									"    tests[\" To: \"  +jsonData.meta.to] = true;\r",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;\r",
									"   \r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"// Loop through multiple pages\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"if(response.links.next !== null) {\r",
									"    var str = response.links.next\r",
									"    console.log(str)\r",
									"    pm.globals.set(\"page\", str.split('=', 2)[1]);\r",
									"    postman.setNextRequest(\"Project DNA Ystr Report\");}\r",
									"\r",
									"\r",
									"pm.test(\"Check returned dnas fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"se_id\",\"org_id\",\"project_id\",\"lab_id\",\"external_case_id\",\"priority\",\"sample_number\",\"mito_sequence_number\",\"mito_sequence_subgroup\",\"mito_sequence_similar\",\"mito_match_count\",\"mito_total_count\",\"mito_receive_date\",\"mito_haplogroup_id\",\"analysis_type_id\",\"mito_results_confidence\",\"mito_method\",\"external_sample_number\",\"dispostion_of_evidence\",\"mito_confirmed_regions\",\"mito_base_pairs\",\"locus\",\"mito_num_loci\",\"mito_mcc_date\",\"additional_testing\",\"sb_id\",\"priority_date\",\"btb_request_date\",\"btb_results_date\",\"disposition\",\"sample_condition\",\"weight_sample_remaining\",\"mito_request_date\",\"mito_polymorphisms\",\"mito_fasta_sequence\",\"mito_haplosubgroup\",\"austr_method\",\"austr_request_date\",\"austr_receive_date\",\"austr_results_confidence\",\"austr_sequence_number\",\"austr_sequence_subgroup\",\"austr_sequence_similar\",\"austr_match_count\",\"austr_total_count\",\"austr_num_loci\",\"austr_loci\",\"austr_mcc_date\",\"ystr_method\",\"ystr_request_date\",\"ystr_receive_date\",\"ystr_results_confidence\",\"ystr_sequence_number\",\"ystr_sequence_subgroup\",\"ystr_sequence_similar\",\"ystr_match_count\",\"ystr_total_count\",\"ystr_num_loci\",\"ystr_loci\",\"ystr_haplogroup\",\"ystr_haplosubgroup\",\"ystr_mcc_date\",\"resample_indicator\",\"notes\",\"uuid\",\"user_id\",\"custom_field_1\",\"custom_field_2\",\"custom_field_3\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"ystr\",\r\n    \"an\": [\"CIL 2003-116\"],\r\n    \"ystr_sequence_number_list\": [\"14E-1\"]\r\n \r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/dna?page={{page}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"dna"
							],
							"query": [
								{
									"key": "type[]",
									"value": "ystr",
									"disabled": true
								},
								{
									"key": "an[]",
									"value": "CIL+2003-116",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{page}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Project DNA Austr Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "353e6fa3-a8e2-45ed-b641-a062f9d76f0f",
								"exec": [
									"// This request will check the data coming from project DNA Austr report based on search criteria selected . This request also loops through all the available pages.\r",
									"\r",
									"pm.test(\"Display the selection criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Criteria slection: \"  + jsonData.criteriaSelection] = true;\r",
									"   \r",
									" \r",
									"});\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Total Count: \"  + jsonData.meta.total] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display current page \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    tests[\" From: \"  + jsonData.meta.from] = true;\r",
									"    tests[\" To: \"  +jsonData.meta.to] = true;\r",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;\r",
									"   \r",
									"});\r",
									"// Loop through multiple pages\r",
									"var response = JSON.parse(responseBody);\r",
									"if(response.links.next !== null) {\r",
									"    var str = response.links.next\r",
									"    console.log(str)\r",
									"    pm.globals.set(\"page\", str.split('=', 2)[1]);\r",
									"    postman.setNextRequest(\"Project DNA Austr Report\");}\r",
									"\r",
									"pm.test(\"Check returned dnas fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"se_id\",\"org_id\",\"project_id\",\"lab_id\",\"external_case_id\",\"priority\",\"sample_number\",\"mito_sequence_number\",\"mito_sequence_subgroup\",\"mito_sequence_similar\",\"mito_match_count\",\"mito_total_count\",\"mito_receive_date\",\"mito_haplogroup_id\",\"analysis_type_id\",\"mito_results_confidence\",\"mito_method\",\"external_sample_number\",\"dispostion_of_evidence\",\"mito_confirmed_regions\",\"mito_base_pairs\",\"locus\",\"mito_num_loci\",\"mito_mcc_date\",\"additional_testing\",\"sb_id\",\"priority_date\",\"btb_request_date\",\"btb_results_date\",\"disposition\",\"sample_condition\",\"weight_sample_remaining\",\"mito_request_date\",\"mito_polymorphisms\",\"mito_fasta_sequence\",\"mito_haplosubgroup\",\"austr_method\",\"austr_request_date\",\"austr_receive_date\",\"austr_results_confidence\",\"austr_sequence_number\",\"austr_sequence_subgroup\",\"austr_sequence_similar\",\"austr_match_count\",\"austr_total_count\",\"austr_num_loci\",\"austr_loci\",\"austr_mcc_date\",\"ystr_method\",\"ystr_request_date\",\"ystr_receive_date\",\"ystr_results_confidence\",\"ystr_sequence_number\",\"ystr_sequence_subgroup\",\"ystr_sequence_similar\",\"ystr_match_count\",\"ystr_total_count\",\"ystr_num_loci\",\"ystr_loci\",\"ystr_haplogroup\",\"ystr_haplosubgroup\",\"ystr_mcc_date\",\"resample_indicator\",\"notes\",\"uuid\",\"user_id\",\"custom_field_1\",\"custom_field_2\",\"custom_field_3\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e6bc8587-9e78-4ff4-825e-273babc18fb9",
								"exec": [
									"pm.globals.set(\"page\",1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"austr\",\r\n    \"an\": [\"CIL 2003-116\"],\r\n    \"p1\": [\"G-01\"]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/dna?page={{page}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"dna"
							],
							"query": [
								{
									"key": "type[]",
									"value": "austr",
									"disabled": true
								},
								{
									"key": "an[]",
									"value": "CIL+2003-116",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{page}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5e6de32a-4a9e-4b5a-b087-6df4304501bf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "021549ea-e6f8-4631-af18-a3a4359a4bb5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Articulations",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Negative wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0857cd8e-11c9-49e3-9402-b9a7093e5898",
										"exec": [
											"\r",
											"// This negative test will loop through diffrent invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Negative wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3498f38-04a0-411d-a475-2190b1dd3d20",
										"exec": [
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"group_select\": \"Shoulder\",\r\n    \"group_side_select\": \"Right\",\r\n    \"skeletalelement_select\":\"1257\",\r\n    \"sb_select\":\"12\",\r\n    \"side_select\":\"Left\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/articulations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"articulations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Invalid Project Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd755cc4-fe56-4e4f-9ea6-40e39e20ff29",
										"exec": [
											"// This negative test will loop through diffrent unauthorized project values and checks if data is being returned or not. It will also check the unauthorized message in the response.\r",
											"\r",
											"var project = pm.globals.get(\"project\");\r",
											"\r",
											"if (project.length > 0) {\r",
											"    postman.setNextRequest(\"Negative Invalid Project Number\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"project\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2618b45-cee6-46c7-be18-bcee1a4593ce",
										"exec": [
											"var project = pm.globals.get(\"project\")\r",
											"\r",
											"if(!project){\r",
											"     project = pm.globals.get(\"invalidproject\");\r",
											"}\r",
											"\r",
											"var currentproject = project.shift();\r",
											"pm.globals.set(\"projectid\", currentproject);\r",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"group_select\": \"Shoulder\",\r\n    \"group_side_select\": \"Right\",\r\n    \"skeletalelement_select\":\"1257\",\r\n    \"sb_select\":\"12\",\r\n    \"side_select\":\"Left\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{project_id}}/articulations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{project_id}}",
										"articulations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Project Articulation wrong search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40ad4e24-9065-4f7f-9a17-2bbcb05c4d36",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"    })\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"     pm.response.to.not.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"group_select\": \"Shoulder\",\r\n    \"group_side_select\": \"Right\",\r\n    \"skeletalelement_select\":\"89652\",\r\n    \"sb_select[]\":\"00\",\r\n    \"side_select[]\":\"Left\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/articulations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"articulations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Specimens by Bone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "deae46d1-5574-43e8-b0fc-c9066e9217b9",
								"exec": [
									"\r",
									"var artculation_specimen = pm.globals.get(\"artculation_specimen\")\r",
									"\r",
									"if(!artculation_specimen){\r",
									"    artculation_specimen = [\"2\",\"1\",\"12\",\"32\",\"18\"];\r",
									"}\r",
									"\r",
									"var currentid = artculation_specimen.shift();\r",
									"\r",
									"\r",
									"pm.globals.set(\"sb_select\", currentid);\r",
									"pm.globals.set(\"artculation_specimen\", artculation_specimen);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a67cce8f-d7b8-41c5-b6ff-335e7561fbb9",
								"exec": [
									"\r",
									"//Looping through 5 different bones Accessory rib, Cranium, Femur, Clavicle and Calcaneus \r",
									"\r",
									"var artculation_specimen = pm.globals.get(\"artculation_specimen\");\r",
									"\r",
									"if (artculation_specimen.length > 0) {\r",
									"    postman.setNextRequest(\"Get Specimens by Bone\")\r",
									"\r",
									"} else {\r",
									" \r",
									"    pm.globals.unset(\"artculation_specimen\")\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_manager_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/specimenarticulations?sb_select[]={{sb_select}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"specimenarticulations"
							],
							"query": [
								{
									"key": null,
									"value": null,
									"disabled": true
								},
								{
									"key": "side_select[]",
									"value": "Left",
									"disabled": true
								},
								{
									"key": "sb_select[]",
									"value": "{{sb_select}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specimen by Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe337d95-c838-4848-8ac2-7a7139cae564",
								"exec": [
									"\r",
									"var artculation_specimen = pm.globals.get(\"artculation_specimen\")\r",
									"\r",
									"if(!artculation_specimen){\r",
									"    artculation_specimen = [\"Shoulder\",\"Hand\",\"Leg\",\"Foot\",\"Cervical vertebrae\"];\r",
									"}\r",
									"\r",
									"var currentid = artculation_specimen.shift();\r",
									"\r",
									"\r",
									"pm.globals.set(\"group_select\", currentid);\r",
									"pm.globals.set(\"artculation_specimen\", artculation_specimen);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "747c77f1-d7cb-4037-a043-bd8ee85bf2e8",
								"exec": [
									"\r",
									"//Looping through 5 different bone group \"Shoulder\", \"hand\" ,\"Leg\",\"Foot\",\"Cervical vertebrae\"\r",
									"\r",
									"var artculation_specimen = pm.globals.get(\"artculation_specimen\");\r",
									"\r",
									"if (artculation_specimen.length > 0) {\r",
									"    postman.setNextRequest(\"Get Specimen by Group\")\r",
									"\r",
									"} else {\r",
									"\r",
									"    pm.globals.unset(\"artculation_specimen\")\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_manager_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/specimenarticulations?group_select[]={{group_select}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"specimenarticulations"
							],
							"query": [
								{
									"key": "group_select[]",
									"value": "{{group_select}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Project Articulation Report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ada11835-6d72-4823-9cb2-38fb55380f93",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37b9319d-ff50-4c92-adf7-e36ea530800f",
								"exec": [
									"//Test to see articulation project report has all required fields and correct count of record is displayed\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Count: \"  + jsonData.count] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display success status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Status: \"  + jsonData.status] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check returned bone fields fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"se_id\",\"org_id\",\"project_id\",\"designator\",\"individual_number\",\"key\",\"key_bone_side\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response is not null\", function () {\r",
									"var jsonData = pm.response.json();\r",
									" tests ['Bone is not empty:' + jsonData.data.se.skeletalbone.name] = (jsonData.data.se.skeletalbone.name.length > 0)\r",
									"tests ['Composite key is not empty:' + jsonData.data.se.key] = (jsonData.data.se.key.length > 0)\r",
									"tests ['Articulated CK is not empty:' + jsonData.data.se.articulations2[0].key] = (jsonData.data.se.articulations2[0].key.length >0)\r",
									"tests ['Articulated CK is not empty:' + jsonData.data.se.articulations2[1].sb.name] = (jsonData.data.se.articulations2[1].sb.name.length >0)\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_manager_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"group_select\": \"Shoulder\",\r\n    \"group_side_select\": \"Right\",\r\n    \"skeletalelement_select\":\"1280\",\r\n    \"sb_select[]\":\"12\",\r\n    \"side_select[]\":\"Left\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/articulations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"articulations"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Anomaly",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Project Anomaly Report wrong search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97277983-dae8-4294-b915-33b6cfccaf6b",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"count must be zero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "zijaNN5p3v250jSlA4XN9BpeRawTYXcT93kGgkptQMxGLamGwdDFyEGD3P5M",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"side_select\": \"Left\",\r\n    \"sb_select\": 2039487\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/anomaly",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"anomaly"
									],
									"query": [
										{
											"key": "anomaly_select[]",
											"value": "14",
											"description": "Rhomboid fossa",
											"disabled": true
										},
										{
											"key": "side_select",
											"value": "left",
											"disabled": true
										},
										{
											"key": "an[]",
											"value": "CIL 2003-116",
											"disabled": true
										},
										{
											"key": "p1[]",
											"value": "G-04",
											"disabled": true
										},
										{
											"key": "p2[]",
											"value": "X-56A",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "100",
											"disabled": true
										},
										{
											"key": "sb_select",
											"value": "12",
											"description": "Clavicle -12, Humerus - 37, Femur - 32",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Project Anomaly  Reports wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f9d137be-ed39-4f57-b54e-2374bb1b0342",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8698628a-0fef-4f5b-8e00-9d17ca53927c",
										"exec": [
											"// This negative test will loop through diffrent invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Project Anomaly  Reports wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"   // pm.response.to.not.be.Body;\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"side_select\": \"Left\",\r\n    \"sb_select\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/anomaly",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"anomaly"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project Anomaly Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c479f57-e938-4b85-b254-90f0cf8f7972",
								"exec": [
									"// This request will check the data coming from project Anomaly report based on search criteria selected . This request also loops through all the available pages.\r",
									"\r",
									"pm.test(\"Response time is less than 40s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(40000);\r",
									"});\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Total Count: \"  + jsonData.meta.total] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display the selection criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Criteria slection: \"  + jsonData.criteriaSelection] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Display current page\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    tests[\" From: \"  + jsonData.meta.from] = true;\r",
									"    tests[\" To: \"  +jsonData.meta.to] = true;\r",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(response.links.next !== null) {\r",
									"    var str = response.links.next\r",
									"    console.log(str)\r",
									"    pm.globals.set(\"page\", str.split('=', 2)[1]);\r",
									"    postman.setNextRequest(\"Project Anomaly Report\");}\r",
									"\r",
									"pm.test(\"Check returned Anomaly fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include( \"key\", \"sb_id\", \"side\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "zijaNN5p3v250jSlA4XN9BpeRawTYXcT93kGgkptQMxGLamGwdDFyEGD3P5M",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"side_select\": \"Left\",\r\n    \"sb_select\": 12\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/anomaly?per_page={{page}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"anomaly"
							],
							"query": [
								{
									"key": "anomaly_select[]",
									"value": "14",
									"description": "Rhomboid fossa",
									"disabled": true
								},
								{
									"key": "side_select",
									"value": "{{anomaly_side}}",
									"disabled": true
								},
								{
									"key": "an[]",
									"value": "CIL 2003-116",
									"disabled": true
								},
								{
									"key": "p1[]",
									"value": "G-04",
									"disabled": true
								},
								{
									"key": "p2[]",
									"value": "X-56A",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "{{page}}"
								},
								{
									"key": "sb_select",
									"value": "{{anomaly_bone}}",
									"description": "Clavicle -12, Humerus - 37, Femur - 32",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Measurements",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Project Measurement Report Wrong Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74b17798-21f2-4d91-8885-45b793f8e587",
										"exec": [
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Project Measurement Report Wrong Token\")\r",
											"    // postman.setNextRequest(\"Project Advanced Specimen wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"   // pm.response.to.not.be.Body;\r",
											"     pm.response.to.not.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":\"32\",\r\n    \"name\":\"Femur\",\r\n    \"category\":\"Lower Extremity\",\r\n    \"type\":\"Long Bone\"   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/measurements",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"measurements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Project Measurement Report Invalid Project Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "db46a40d-e8e1-4343-87bb-693a8079260f",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"\r",
											"\r",
											"var project = pm.globals.get(\"project\")\r",
											"\r",
											"if(!project){\r",
											"     project = [12,4,13];\r",
											"}\r",
											"\r",
											"var currentproject = project.shift();\r",
											"pm.globals.set(\"projectid\", currentproject);\r",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15302750-0898-4d3c-a38d-08422ec2f5ca",
										"exec": [
											"\r",
											"// This request will check the data coming from project Measurement report. This request also loops through all the available pages.\r",
											"\r",
											"\r",
											"var project = pm.globals.get(\"project\");\r",
											"\r",
											"if (project.length > 0) {\r",
											"    postman.setNextRequest(\"Project Measurement Reports Invalid Project Number\")\r",
											"    // postman.setNextRequest(\"Project Measurements Reports Wrong Project\")\r",
											"} else {\r",
											"    pm.globals.unset(\"project\")\r",
											"   \r",
											"}\r",
											"pm.test(\"Check unauthorized message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.data).to.include(\"Not Authorized to view Project data\");\r",
											"   \r",
											"});\r",
											"\r",
											"//check to see you get 403 forbidden error\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reports/projects/1/measurements?page={{page}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"1",
										"measurements"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project Measurement Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0a2e8a2-199b-4744-87e6-cb72bf587b52",
								"exec": [
									"//Test to validate expected field values are returned\r",
									"//Test to validate that the request is valid and has content\r",
									"//Test pagination \r",
									"//Test looping\r",
									"\r",
									"pm.test(\"Check for expected field values\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\",\"name\",\"search_name\", \"side\", \"bone\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var body = JSON.parse(responseBody);\r",
									"  tests[\" Total Count: \"  + body.meta.total] = true;\r",
									"    tests[\" From: \"  + body.meta.from] = true;\r",
									"  tests[\" To: \"  + body.meta.to] = true;\r",
									"  tests[\" Current Page: \"  + body.meta.current_page] = true;\r",
									"  tests[\" Criteria slection: \"  + body.criteriaSelection] = true;\r",
									"\r",
									"  var response = JSON.parse(responseBody);\r",
									"\r",
									"if(response.links.next !== null) {\r",
									"    var str = response.links.next\r",
									"    console.log(str)\r",
									"    pm.globals.set(\"page\", str.split('=', 2)[1]);\r",
									"    // postman.setNextRequest(\"Project Measurement Report\");} keeps loop going\r",
									"    postman.setNextRequest(\"Measurements Report\");}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":\"32\",\r\n    \"name\":\"Femur\",\r\n    \"category\":\"Lower Extremity\",\r\n    \"type\":\"Long Bone\"   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/measurements?page={{page}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"measurements"
							],
							"query": [
								{
									"key": "individual_number_select",
									"value": "CIL 2003-116-G-01",
									"disabled": true
								},
								{
									"key": "side_select_INumber",
									"value": "Right",
									"disabled": true
								},
								{
									"key": "sb_select",
									"value": "12",
									"disabled": true
								},
								{
									"key": "side_selec",
									"value": "Left",
									"disabled": true
								},
								{
									"key": "an[]",
									"value": "CIL 2018-337",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{page}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Zones",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Negative Project Zones",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0361ae6d-b327-48a8-89fa-22f30f64ae74",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc024425-791e-4246-a3c4-9ab2308feef7",
										"exec": [
											"// This negative test is to pass invalid search criteria with invalid characters,numbers and check if the data is being returned or not.\r",
											"\r",
											"\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"count must be zero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "zijaNN5p3v250jSlA4XN9BpeRawTYXcT93kGgkptQMxGLamGwdDFyEGD3P5M",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{per_page}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"search_type_select\": \"Exclusive\",\r\n    \"sb_select\":\"2\",\r\n    \"zone_select\": [97]\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{project_id}}/zones",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{project_id}}",
										"zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Project Zones Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e02e9063-2bd1-462b-8d37-0026b0e18325",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"\r",
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c9920b86-b3b6-4c0d-929a-13eaad9d3992",
										"exec": [
											"// This negative test will loop through different invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Negative Project Zones Token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"   // pm.response.to.not.be.Body;\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{per_page}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"search_type_select\": \"Inclusive\",\r\n    \"sb_select\":\"37\",\r\n    \"zone_select\": [97]\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/zones",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "Project Zones Report Wrong Search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da9f149a-83be-48c2-b636-496c22a3cee7",
										"exec": [
											"pm.globals.set(\"page\",1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "93712c70-6eed-4ee8-ad2d-89828def05f9",
										"exec": [
											"// This negative test is to pass invalid search criteria with invalid characters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"count must be zero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_manager_token}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{per_page}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"search_type_select\": \"Exclusive\",\r\n    \"sb_select\":\"2\",\r\n    \"zone_select\": [97]\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/zones",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"zones"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project Zones Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bab82f71-5c9a-4c85-a39b-e62613f6036f",
								"exec": [
									"// This request will check the data coming from project Zones report based on search criteria selected, in this case sb_select, search_type_select & szone_select . This request also loops through all the available pages. \r",
									"\r",
									"pm.test(\"Display the selection criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Criteria slection: \"  + jsonData.criteriaSelection] = true;\r",
									"   \r",
									" \r",
									"});\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Total Count: \"  + jsonData.meta.total] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display current page\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    tests[\" From: \"  + jsonData.meta.from] = true;\r",
									"    tests[\" To: \"  +jsonData.meta.to] = true;\r",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;\r",
									"   \r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "652627f4-e25b-4536-a72a-f30fc349c4c0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_manager_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{per_page}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n    \"search_type_select\": \"Inclusive\",\r\n    \"sb_select\":\"37\",\r\n    \"zone_select\": [97]\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/zones",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"zones"
							],
							"query": [
								{
									"key": "an[]",
									"value": "CIL 2003-116",
									"disabled": true
								},
								{
									"key": "search_type_select[]",
									"value": "Inclusive",
									"disabled": true
								},
								{
									"key": "sb_select",
									"value": "12",
									"disabled": true
								},
								{
									"key": "zone_select []",
									"value": "100",
									"disabled": true
								},
								{
									"key": "zone_select[]",
									"value": "42",
									"disabled": true
								},
								{
									"key": "side_select",
									"value": "Right",
									"disabled": true
								},
								{
									"key": "side_select[]",
									"value": "Left",
									"disabled": true
								},
								{
									"key": "search_type_select",
									"value": "Exclusive",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{page}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Pathology",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Negative Project Pathology Report Wrong Pathology_Select",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f169a05f-e960-49b5-9618-e74d9fb63363",
										"exec": [
											"/*",
											" This test is to test the functionality and the correctness of the Project Pathology Report with nonexistent pathology_select number specified in Body.",
											"*/",
											"",
											"//Check that no data is returned",
											"pm.test(\"Check response has undefined data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0]).to.eql(undefined)",
											"    // console.log(jsonData.data[0])",
											"});",
											"",
											"//check that it did search for specified pathology",
											"// pm.test(\"Check response matches the specified pathology_select search criteria\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.criteria.pathology_select).to.eql(['7777777']);",
											"// });",
											"",
											"//check that random fields are missing",
											"pm.test(\"Check returned pathology fields are not included\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"pathology_id\",\"pathology_select\",\"org_id\",\"project_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "zijaNN5p3v250jSlA4XN9BpeRawTYXcT93kGgkptQMxGLamGwdDFyEGD3P5M",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pathology_select\": [1]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/pathology?pathology_select[]=7777777&page=1&per_page=100",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"pathology"
									],
									"query": [
										{
											"key": "pathology_select[]",
											"value": "7777777"
										},
										{
											"key": "pathology_select[]",
											"value": "20",
											"disabled": true
										},
										{
											"key": "sb_select",
											"value": "32",
											"disabled": true
										},
										{
											"key": "side_select",
											"value": "Right",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "100"
										},
										{
											"key": "/api/reports/projects/2/pathology?page=1",
											"value": "",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Project Pathology Report Wrong Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e8ba36c-6423-4114-8570-122579e99668",
										"exec": [
											"//testing wrong tokens to make sure it doesn't return any data",
											"var token = pm.globals.get(\"token\");",
											"console.log(token)",
											"",
											"if (token.length > 0) {",
											"    postman.setNextRequest(\"Negative wrong token\")",
											"} else {",
											"    pm.globals.unset(\"token\")",
											"}",
											"",
											"pm.test(\"response must be not valid and not have a body\", function () {",
											"     pm.response.to.not.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6b52ce54-e49d-4098-b13d-e60e80536193",
										"exec": [
											"pm.globals.set(\"page\", \"1\");",
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")",
											"pm.globals.set(\"atoken\", anthrotoken);",
											"",
											"",
											"var token = pm.globals.get(\"token\")",
											"",
											"if(!token){",
											"     token = pm.globals.get(\"invalidtoken\");",
											"}",
											"",
											"var currenttoken = token.shift();",
											"",
											"",
											"",
											"pm.globals.set(\"atoken\", currenttoken);",
											"pm.globals.set(\"token\", token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pathology_select\": [1]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/pathology?page={{page}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"pathology"
									],
									"query": [
										{
											"key": "pathology_select[]",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pathology_select[]",
											"value": "20",
											"disabled": true
										},
										{
											"key": "sb_select",
											"value": "32",
											"disabled": true
										},
										{
											"key": "side_select",
											"value": "Right",
											"disabled": true
										},
										{
											"key": "page",
											"value": "{{page}}"
										},
										{
											"key": "per_page",
											"value": "100",
											"disabled": true
										},
										{
											"key": "/api/reports/projects/2/pathology?page=1",
											"value": null,
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Project Pathology Report Wrong Page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9cd19c6-da96-4256-a027-28a03faaff01",
										"exec": [
											"/*",
											"This test tests an invalid page. Since only one data result is returned for this report and pathology, only one result should appear on frist page. When we test for second page, it should show 0 results on that page, but should still have a count of 1 because there is one on first page.",
											"*/",
											"var body = JSON.parse(responseBody);",
											"tests[\" Total Count: \"  + body.meta.total] = true; //number of unique keys expected (rows in ui)",
											"tests[\" From: \"  + body.meta.from] = true; //first ",
											"tests[\" To: \"  + body.meta.to] = true; //last",
											"tests[\" Current Page: \"  + body.meta.current_page] = true;",
											"",
											"",
											"//1 record total ",
											"pm.test(\"Check count of records\", function () {",
											"    var jsonData = pm.response.json();",
											"    tests[\" Total Count: \"  + jsonData.meta.total] = true;",
											"});",
											"",
											"//Check that no data is returned on second page",
											"pm.test(\"Check response has undefined data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0]).to.eql(undefined)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pathology_select\": [1]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/pathology?pathology_select[]=1&page=2&per_page=100",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"pathology"
									],
									"query": [
										{
											"key": "pathology_select[]",
											"value": "1"
										},
										{
											"key": "pathology_select[]",
											"value": "20",
											"disabled": true
										},
										{
											"key": "sb_select",
											"value": "32",
											"disabled": true
										},
										{
											"key": "side_select",
											"value": "Right",
											"disabled": true
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "per_page",
											"value": "100"
										},
										{
											"key": "/api/reports/projects/2/pathology?page=1",
											"value": null,
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project Pathology Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "515a55d1-44b3-454a-973f-7ae38cd730cb",
								"exec": [
									"/*",
									" This test is to test the functionality and the correctness of the Project Pathology Report with a given",
									" pathology_select value, assigned in the Params section.",
									"*/",
									"var body = JSON.parse(responseBody);",
									"tests[\" Total Count: \"  + body.meta.total] = true; //number of unique keys expected (rows in ui)",
									"tests[\" From: \"  + body.meta.from] = true; //first ",
									"tests[\" To: \"  + body.meta.to] = true; //last",
									"tests[\" Current Page: \"  + body.meta.current_page] = true;",
									"tests[\" Criteria slection: \"  + body.criteria.pathology_select] = true;",
									"",
									"pm.test(\"Display the selection criteria\", function () {",
									"    var jsonData = pm.response.json();",
									"    tests[\" Criteria slection: \"  + jsonData.criteria.pathology_select] = true;",
									"    console.log(\"Criteria Selection is: \" + jsonData.criteria.pathology_select);",
									"});",
									"",
									"pm.test(\"Check response matches the specified pathology_select search criteria\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData)",
									"    pm.expect(jsonData.criteria.pathology_select).to.eql(['1']);",
									"    console.log(body.criteria.pathology_select)",
									"});",
									"",
									"pm.test(\"Check count of records\", function () {",
									"    var jsonData = pm.response.json();",
									"    tests[\" Total Count: \"  + jsonData.meta.total] = true;",
									"});",
									"",
									"pm.test(\"Check returned individual number fields\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"pathology_id\",\"pathology_select\",\"org_id\",\"project_id\");",
									"});",
									"",
									"pm.test(\"Check current page\", function () {",
									"    var jsonData = pm.response.json();",
									"    tests[\" From: \"  + jsonData.meta.from] = true;",
									"    tests[\" To: \"  +jsonData.meta.to] = true;",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pathology_select\": [1]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/pathology?pathology_select[]=1&page=1&per_page=100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"pathology"
							],
							"query": [
								{
									"key": "pathology_select[]",
									"value": "1"
								},
								{
									"key": "pathology_select[]",
									"value": "20",
									"disabled": true
								},
								{
									"key": "sb_select",
									"value": "32",
									"disabled": true
								},
								{
									"key": "side_select",
									"value": "Right",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "100"
								},
								{
									"key": "/api/reports/projects/2/pathology?page=1",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Methods",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Method report negative wrong token ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b497e280-80d5-4dc3-b793-abeb55048fd4",
										"exec": [
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f40e5bbc-b303-425b-b6f2-f214fcee282b",
										"exec": [
											"// This negative test will loop through diffrent invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Negative wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n        \"sb_select\": [\r\n            \"32\"\r\n        ],\r\n        \"method_select\": [\r\n            \"62\"\r\n        ],\r\n        \"method_feature_select\": [\r\n            \"89\"\r\n        ],\r\n        \"score_select\": \"1\",\r\n        \"range_select\": \"2\",\r\n        \"page\": \"1\",\r\n        \"per_page\": \"100\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/methods",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"methods"
									]
								}
							},
							"response": []
						},
						{
							"name": "Method report negative search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7095e719-1227-4be7-90a7-f5fd9ba2d5c9",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    })\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"     pm.response.to.not.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accession_number\": \"oooooooooo\",\r\n    \"provenance1\": \"V-10\",\r\n    \"provenance2\": \"K-098\",\r\n    \"se_id\":\"0000\",\r\n    \"method_id\":\"00\",\r\n    \"method_feature_id\": \"00\",\r\n    \"bone_side\":\"unsided\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/methods",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"methods"
									]
								}
							},
							"response": []
						},
						{
							"name": "Method report wrong project number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6abff0b1-d858-4d7e-978b-74447224ad12",
										"exec": [
											"var project = pm.globals.get(\"project\")\r",
											"\r",
											"if(!project){\r",
											"     project = pm.globals.get(\"invalidproject\");\r",
											"}\r",
											"\r",
											"var currentproject = project.shift();\r",
											"pm.globals.set(\"projectid\", currentproject);\r",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5213d58f-1e9d-4bf8-bf58-3c6290d9e204",
										"exec": [
											"// This negative test will loop through diffrent unauthorized project values and checks if the data being returned or not. It will also check the unauthorized message.\r",
											"\r",
											"var project = pm.globals.get(\"project\");\r",
											"\r",
											"if (project.length > 0) {\r",
											"    postman.setNextRequest(\"Negative Invalid Project Number\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"project\")\r",
											"   \r",
											"}\r",
											"\r",
											"pm.test(\"Check unauthorized message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.data).to.include(\"Not Authorized to view Project data\");\r",
											"   \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{projectid}}/methods",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{projectid}}",
										"methods"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Method report Scores array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71ca40b5-7e5c-4f06-bc79-5370fd7ff499",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"method_feature_select\" : \"578\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/jsonscoresarray",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"jsonscoresarray"
							],
							"query": [
								{
									"key": "method_feature_select[]",
									"value": "578",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Method report Ranges array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef6995ae-f2c9-4c53-bb17-9bdd572f2384",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"method_feature_select\" : \"578\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/jsonrangesarray",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"jsonrangesarray"
							],
							"query": [
								{
									"key": "method_feature_select[]",
									"value": "578",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Project Method Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e581943b-ba05-4c9e-a502-037b017a19dd",
								"exec": [
									"//Test to see method project report has all required fields and correct count of record is displayed\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Count: \"  + jsonData.count] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display success status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Status: \"  + jsonData.status] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check returned fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\",\"sb_id\",\"user_id\",\"org_id\", \"project_id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response is not null\", function () {\r",
									"var jsonData = pm.response.json();\r",
									" tests ['Bone is not empty:' + jsonData.data[0].skeletalbone.name] = (jsonData.data[0].skeletalbone.name.length > 0)\r",
									"tests ['se_id is not empty:' + jsonData.data[0].sb_id] = (jsonData.data[0].sb_id >0)\r",
									"tests ['method_id is not empty:' + jsonData.data[0].method_id] = (jsonData.data[0].method_id >0)\r",
									"tests ['method_feature_id is not empty:' + jsonData.data[0].method_feature_id] = (jsonData.data[0].method_feature_id >0)\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n        \"sb_select\": [\r\n            \"32\"\r\n        ],\r\n        \"method_select\": [\r\n            \"62\"\r\n        ],\r\n        \"method_feature_select\": [\r\n            \"89\"\r\n        ],\r\n        \"score_select\": \"1\",\r\n        \"range_select\": \"2\",\r\n        \"page\": \"1\",\r\n        \"per_page\": \"100\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/methods",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"methods"
							],
							"query": [
								{
									"key": "sb_select[]",
									"value": "32",
									"disabled": true
								},
								{
									"key": "method_select[]",
									"value": "62",
									"disabled": true
								},
								{
									"key": "method_feature_select[]",
									"value": "89",
									"disabled": true
								},
								{
									"key": "score_select",
									"value": "1",
									"disabled": true
								},
								{
									"key": "range_select",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "100",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Isotope",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Negative Isotope Report wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f8acb188-ccad-4910-8c98-2003999b46a9",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"\r",
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0bd9f170-9031-44e5-a389-de52f8b020d4",
										"exec": [
											"// This negative test will loop through different invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Negative Isotope Report wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"   // pm.response.to.not.be.Body;\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "<calculated when request is sent>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/isotopes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"isotopes"
									]
								},
								"description": "Tests using an invalid token for the project Isotope Report"
							},
							"response": []
						},
						{
							"name": "Negative Isotope Report wrong search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "de5f1fb7-5a2a-4dc6-9805-3e8cd8130061",
										"exec": [
											"pm.globals.set(\"page\",1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f0374042-0341-4834-9c17-3ab1480f591c",
										"exec": [
											"// This negative test is to pass invalid search criteria with invalid characters for the results_confidence.The test will check if the data is being returned or not. The response should not have any data, and the count should be 0.\r",
											"\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"count must be zero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{isotope_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "content-l",
										"value": "<calculated when request is sent>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n       \"results_confidence\":[\"abc\"]\r\n       \r\n  \r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/isotopes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"isotopes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Isotope Report wrong project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "58b6d189-569f-418a-b290-cb2e6dfc2a15",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"\r",
											"\r",
											"var project = pm.globals.get(\"project\")\r",
											"\r",
											"\r",
											"if(!project){\r",
											"      project = pm.globals.get(\"invalidproject\");\r",
											"}\r",
											"\r",
											"var currentproject = project.shift();\r",
											"\r",
											"console.log(currentproject)\r",
											"pm.globals.set(\"projectid\", currentproject);\r",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d5352d50-caf0-45ad-bcd8-f431b35fcc22",
										"exec": [
											"// This negative test will loop through diffrent unauthorized project values and check if data is being returned or not. It will also check the unauthorized message.\r",
											"\r",
											"var project = pm.globals.get(\"project\");\r",
											"\r",
											"if (project.length > 0) {\r",
											"    postman.setNextRequest(\"Negative Isotope Report wrong project\") \r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"project\")\r",
											"   \r",
											"}\r",
											"pm.test(\"Check unauthorized message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.data).to.include(\"Not Authorized to view Project data\");\r",
											"   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true,
									"content-length": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{isotope_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "<calculated when request is sent>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"results_confidence\": [\"Pending\"]\r\n   \r\n  \r\n    \r\n  \r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{project_id}}/isotopes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{project_id}}",
										"isotopes"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project Isotope Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e7d8a5b-8454-4b32-b7ca-c30fc3cdcd96",
								"exec": [
									"//This test retrieves all isotopes on a given project.\r",
									"//Tests verify that the total count of isotopes on a specimen are\r",
									"//correct and that the return status = \"success\".\r",
									"//Tests also verify that the response includes values in the required fields for the isotope.\r",
									"\r",
									"var body = JSON.parse(responseBody);\r",
									"  tests[\" Total Count: \"  + body.meta.total] = true;\r",
									"  tests[\"status =: \" + body.status] = \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Check response variables\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"individual_number\", \"sb_id\",\"side\",\"sample_number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{isotope_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/isotopes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"isotopes"
							],
							"query": [
								{
									"key": "resultsconfidence[]",
									"value": "Reportable",
									"disabled": true
								},
								{
									"key": "resultsconfidence[]",
									"value": "Pending",
									"disabled": true
								},
								{
									"key": "lab_id[]",
									"value": "4",
									"disabled": true
								},
								{
									"key": "lab_id",
									"value": "3",
									"disabled": true
								},
								{
									"key": "batch_id[]",
									"value": "1",
									"disabled": true
								},
								{
									"key": "batch_id[]",
									"value": "2",
									"disabled": true
								},
								{
									"key": "project_id[]",
									"value": "2",
									"disabled": true
								},
								{
									"key": "weight_collagen_to[]",
									"value": "2",
									"disabled": true
								},
								{
									"key": "weight_collagen_from[]",
									"value": "15",
									"disabled": true
								},
								{
									"key": "s_percent_from[]",
									"value": "5",
									"disabled": true
								},
								{
									"key": "s_percent_to[]",
									"value": "10",
									"disabled": true
								},
								{
									"key": "c_percent_from[]",
									"value": "3",
									"disabled": true
								},
								{
									"key": "c_percent_to[]",
									"value": "5",
									"disabled": true
								},
								{
									"key": "n_percent_from[]",
									"value": "3",
									"disabled": true
								},
								{
									"key": "n_percent_to[]",
									"value": "5",
									"disabled": true
								},
								{
									"key": "accession_number",
									"value": "CIL 2003-116",
									"disabled": true
								},
								{
									"key": "provence1",
									"value": "G-01",
									"disabled": true
								},
								{
									"key": "provenance2",
									"value": "X-100",
									"disabled": true
								},
								{
									"key": "o_percent_from[]",
									"value": "1",
									"disabled": true
								},
								{
									"key": "o_percent_to[]",
									"value": "10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Trauma",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Negative Project Trauma Report Wrong Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9f98bd39-4f09-456c-a663-4042dc552d51",
										"exec": [
											"//This negative wrong token test is testing an invalid token values (invalidtoken) and checks if the data being returned or not. It will pass if there is no data being returned.",
											"pm.globals.set(\"page\", \"1\");",
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")",
											"pm.globals.set(\"atoken\", anthrotoken);",
											"",
											"",
											"var token = pm.globals.get(\"token\")",
											"",
											"if(!token){",
											"     token = pm.globals.get(\"invalidtoken\");",
											"}",
											"",
											"var currenttoken = token.shift();",
											"",
											"",
											"",
											"pm.globals.set(\"atoken\", currenttoken);",
											"pm.globals.set(\"token\", token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3851c49a-7736-4e1f-84ab-4ccd957a928f",
										"exec": [
											"// This negative wrong token test is testing an invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.",
											"var token = pm.globals.get(\"token\");",
											"",
											"if (token.length > 0) {",
											"    postman.setNextRequest(\"Project Trauma Reports wrong token\")",
											"",
											"} else {",
											"    pm.globals.unset(\"token\")",
											"   ",
											"}",
											"",
											"pm.test(\"response must be not valid and not have a body\", function () {",
											"   // pm.response.to.not.be.Body;",
											"     pm.response.to.not.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"trauma_select\": [1, 6]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/trauma",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"trauma"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Project Trauma Report Wrong Search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e73955e4-e7cb-490f-a53e-5aef26d6569c",
										"exec": [
											"pm.globals.set(\"page\",1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6e2a5243-7cde-4e77-83cc-d8df4362e391",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not.",
											"",
											"pm.test(\"Data array is empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.length).to.eql(0);",
											"});",
											"",
											"",
											"pm.test(\"count must be zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.count).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"trauma_select\": [\"1000\"]\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/trauma",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"trauma"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Project Trauma Report Wrong Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32d630f8-cb0c-4b2d-af71-c4f81a272e2e",
										"exec": [
											"// This negative test will loop through diffrent unauthorized project values and checks if the data being returned or not. It will also check the unauthorized message.",
											"",
											"var project = pm.globals.get(\"project\");",
											"",
											"if (project.length > 0) {",
											"    postman.setNextRequest(\"Negative Project Trauma Report Wrong Project\")",
											"",
											"} else {",
											"    pm.globals.unset(\"project\")",
											"   ",
											"}",
											"pm.test(\"Check unauthorized message\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.data).to.include(\"Not Authorized to view Project data\");",
											"   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e08b9e45-2243-49c0-b558-c61167cc0e68",
										"exec": [
											"//This negative wrong token test is testing an invalid project (invalidproject) and checks if the data being returned or not. It will pass if there is no data being returned.",
											"pm.globals.set(\"page\", \"1\");",
											"",
											"",
											"var project = pm.globals.get(\"project\")",
											"",
											"",
											"if(!project){",
											"      project = pm.globals.get(\"invalidproject\");",
											"}",
											"",
											"var currentproject = project.shift();",
											"",
											"console.log(currentproject)",
											"pm.globals.set(\"projectid\", currentproject);",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"trauma_select\": [1,6]\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/1/trauma",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"1",
										"trauma"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project Trauma Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93de13d0-5bab-402f-8f00-8a4424047d12",
								"exec": [
									"// This request will check the data coming from project trauma report based on search criteria selected (trauma_select:1,6). This request also loops through all the available pages.",
									"",
									"pm.test(\"Display the selection criteria\", function () {",
									"    var jsonData = pm.response.json();",
									"     tests[\" Criteria slection: \"  + jsonData.criteriaSelection] = true;",
									"   ",
									" ",
									"});",
									"pm.test(\"Display count of records\", function () {",
									"    var jsonData = pm.response.json();",
									"     tests[\" Total Count: \"  + jsonData.meta.total] = true;",
									"});",
									"pm.test(\"Display current page\", function () {",
									"    var jsonData = pm.response.json();",
									"    tests[\" From: \"  + jsonData.meta.from] = true;",
									"    tests[\" To: \"  +jsonData.meta.to] = true;",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;",
									"   ",
									"});",
									"",
									"// Loop through multiple pages",
									"var response = JSON.parse(responseBody);",
									"",
									"if(response.links.next !== null) {",
									"    var str = response.links.next",
									"    console.log(str)",
									"    pm.globals.set(\"page\", str.split('=', 2)[1]);",
									"    postman.setNextRequest(\"Project Trauma Report\");}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0a468aa7-830d-44a9-b05b-2659162fcfa2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"trauma_select\": [1,6]\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/trauma",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"trauma"
							],
							"query": [
								{
									"key": "trauma_select[]",
									"value": "1",
									"disabled": true
								},
								{
									"key": "trauma_select[]",
									"value": "6",
									"disabled": true
								},
								{
									"key": "side_select",
									"value": "Left",
									"disabled": true
								},
								{
									"key": "an[]",
									"value": "CIL 2003-116",
									"disabled": true
								},
								{
									"key": "p1[]",
									"value": "G-04",
									"disabled": true
								},
								{
									"key": "p2[]",
									"value": "X-56F",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "100",
									"disabled": true
								},
								{
									"key": "sb_select",
									"value": "37",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{page}}",
									"disabled": true
								},
								{
									"key": "sb_select",
									"value": "77",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Advanced Specimen",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Project Advanced Specimen wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a488e14-7c75-4d3f-92f3-750fa78324cf",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"\r",
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86f6d9df-a8e6-4c4e-9034-9f167e364f52",
										"exec": [
											"// This negative test will loop through diffrent invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Project Advanced Specimen wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"   // pm.response.to.not.be.Body;\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sb_id\":\"37\",\r\n    \"side\":\"left\",\r\n    \"ct_scanned\":true,\r\n    \"completeness\":true\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/advanced",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"advanced"
									]
								}
							},
							"response": []
						},
						{
							"name": "Project Advanced Specimen Report wrong criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "498b912f-f519-47a0-a760-6bc780a5a2ce",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"count must be zero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_manager_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sb_id\": \"1234\" }\r\n    \r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/advanced",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"advanced"
									],
									"query": [
										{
											"key": "sb_id",
											"value": "1234",
											"disabled": true
										},
										{
											"key": "side",
											"value": "Left",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "100",
											"disabled": true
										},
										{
											"key": "measured",
											"value": "true",
											"disabled": true
										},
										{
											"key": "xray_scanned",
											"value": "true",
											"disabled": true
										},
										{
											"key": "ct_scanned",
											"value": "true",
											"disabled": true
										},
										{
											"key": "an",
											"value": "CIL 2003-116",
											"disabled": true
										},
										{
											"key": "an",
											"value": "CIL 2018-337",
											"disabled": true
										},
										{
											"key": "completeness",
											"value": "Complete",
											"disabled": true
										},
										{
											"key": "remains_status",
											"value": "In Lab",
											"disabled": true
										},
										{
											"key": "remains_status",
											"value": "Closed",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Project Advance Specimen Report wrong project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d0fa89-8b2d-41d4-9a86-8df6c3e5d731",
										"exec": [
											"// This negative test will loop through diffrent unauthorized project values and checks if the data being returned or not. It will also check the unauthorized message.\r",
											"\r",
											"var project = pm.globals.get(\"project\");\r",
											"\r",
											"if (project.length > 0) {\r",
											"    postman.setNextRequest(\"Project Advance Specimen Report wrong project\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"project\")\r",
											"   \r",
											"}\r",
											"pm.test(\"Check unauthorized message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.data).to.include(\"Not Authorized to view Project data\");\r",
											"   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e66b04c9-ccb5-49a9-aa7c-eb992d5643e6",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"\r",
											"\r",
											"var project = pm.globals.get(\"project\")\r",
											"\r",
											"if(!project){\r",
											"     project = pm.globals.get(\"invalidproject\");\r",
											"}\r",
											"\r",
											"var currentproject = project.shift();\r",
											"pm.globals.set(\"projectid\", currentproject);\r",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sb_id\":\"37\",\r\n    \"side\":\"left\",\r\n    \"ct_scanned\":true,\r\n    \"completeness\":true\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{projectid}}/dna?page={{page}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{projectid}}",
										"dna"
									],
									"query": [
										{
											"key": "type[]",
											"value": "mito",
											"disabled": true
										},
										{
											"key": "an[]",
											"value": "CIL+2003-116",
											"disabled": true
										},
										{
											"key": "p1[]",
											"value": "G-01",
											"disabled": true
										},
										{
											"key": "page",
											"value": "{{page}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project Advanced Specimen Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45a8ce06-9e4d-40b1-8d35-26c764d0e20c",
								"exec": [
									"// This request will check the data coming from project DNA Mito report based on search criteria selected . This request also loops through all the available pages. Passing the parameters in the body is not working right now. so this request is using the query params.\r",
									"\r",
									"pm.test(\"Display the selection criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Criteria slection: \"  + jsonData.criteriaSelection] = true;\r",
									"   \r",
									" \r",
									"});\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Total Count: \"  + jsonData.meta.total] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display current page\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    tests[\" From: \"  + jsonData.meta.from] = true;\r",
									"    tests[\" To: \"  +jsonData.meta.to] = true;\r",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"// Loop through multiple pages\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"if(response.links.next !== null) {\r",
									"    var str = response.links.next\r",
									"    pm.globals.set(\"page\", str.split('=', 2)[1]);\r",
									"    postman.setNextRequest(\"Project DNA Ystr Report\");}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_manager_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/advanced?sb_id=37&side=Left&ct_scanned=true&completeness=Complete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"advanced"
							],
							"query": [
								{
									"key": "sb_id",
									"value": "37"
								},
								{
									"key": "side",
									"value": "Left"
								},
								{
									"key": "per_page",
									"value": "100",
									"disabled": true
								},
								{
									"key": "measured",
									"value": "true",
									"disabled": true
								},
								{
									"key": "xray_scanned",
									"value": "true",
									"disabled": true
								},
								{
									"key": "ct_scanned",
									"value": "true"
								},
								{
									"key": "an",
									"value": "CIL 2003-116",
									"disabled": true
								},
								{
									"key": "an",
									"value": "CIL 2018-337",
									"disabled": true
								},
								{
									"key": "completeness",
									"value": "Complete"
								},
								{
									"key": "remains_status",
									"value": "In Lab",
									"disabled": true
								},
								{
									"key": "remains_status",
									"value": "Closed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Individual Number",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Negative Invalid Project Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e227be4d-6cdf-4251-bfd0-d4b04ce24ccb",
										"exec": [
											"// This negative test will loop through diffrent unauthorized project values and checks if the data being returned or not. It will also check the unauthorized message.\r",
											"\r",
											"var project = pm.globals.get(\"project\");\r",
											"\r",
											"if (project.length > 0) {\r",
											"    postman.setNextRequest(\"Negative Invalid Project Number\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"project\")\r",
											"   \r",
											"}\r",
											"pm.test(\"Check unauthorized message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.data).to.include(\"Not Authorized to view Project data\");\r",
											"   \r",
											"});\r",
											"\r",
											"//check to see you get 403 forbidden error\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09339eaa-d927-4325-93bf-da3c36c2e8cb",
										"exec": [
											"\r",
											"pm.globals.set(\"page\", \"1\");\r",
											"\r",
											"\r",
											"var project = pm.globals.get(\"project\")\r",
											"\r",
											"if(!project){\r",
											"     project = pm.globals.get(\"invalidproject\");\r",
											"}\r",
											"\r",
											"var currentproject = project.shift();\r",
											"pm.globals.set(\"projectid\", currentproject);\r",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{projectid}}/individualnumber?page={{page}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{projectid}}",
										"individualnumber"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2ef2f0d-9a50-4925-9d1c-97dcab1eff2a",
										"exec": [
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a502b7bf-0e26-4de2-9dd9-e16f92a75c6d",
										"exec": [
											"// This negative test will loop through diffrent invalid token values and checks if the data being returned or not. It will pass if there is no data being returned.\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Negative wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/individualnumber?page={{page}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"individualnumber"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Individual Number Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c2d92a0-515f-41a0-b125-0aca4d5e42a9",
								"exec": [
									"////Test to see individual project report has all required fields and correct count of record is displayed\r",
									"\r",
									"pm.test(\"Check for expected field values\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"sb_id\",\"individual_number\",\"mito_sequence_number\",\"key_bone_side\",\"count\",\"abc\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var body = JSON.parse(responseBody);\r",
									"  tests[\" Total Count: \"  + body.meta.total] = true;\r",
									"    tests[\" From: \"  + body.meta.from] = true;\r",
									"  tests[\" To: \"  + body.meta.to] = true;\r",
									"  tests[\" Current Page: \"  + body.meta.current_page] = true;\r",
									" \r",
									"//Comment this as this as 391 pages to display\r",
									"  //var response = JSON.parse(responseBody);\r",
									"\r",
									"//if(response.links.next !== null) {\r",
									"  //  var str = response.links.next\r",
									"    //8console.log(str)\r",
									"    //pm.globals.set(\"page\", str.split('=', 2)[1]);\r",
									"   // postman.setNextRequest(\"Individual Number Report\");}\r",
									"\r",
									"\r",
									"pm.test(\"Check returned individual number fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"se_id\",\"user_id\",\"org_id\",\"project_id\",\"external_case_id\",\"individual_number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27d37e97-9c30-496c-b197-abb19a5dabd2",
								"exec": [
									"pm.globals.set(\"per_page\", \"10\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/individualnumber?page={{page}}&per_page={{per_page}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"individualnumber"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "per_page",
									"value": "{{per_page}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Individual Number Details",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Negative wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6f3cb075-dc60-4c8c-aa82-d10db9ab2d78",
										"exec": [
											"pm.globals.set(\"page\", \"1\");\r",
											"anthrotoken = pm.environment.get(\"anthro_analyst_token\")\r",
											"pm.globals.set(\"atoken\", anthrotoken);\r",
											"\r",
											"\r",
											"var token = pm.globals.get(\"token\")\r",
											"\r",
											"if(!token){\r",
											"     token = pm.globals.get(\"invalidtoken\");\r",
											"}\r",
											"\r",
											"var currenttoken = token.shift();\r",
											"\r",
											"\r",
											"\r",
											"pm.globals.set(\"atoken\", currenttoken);\r",
											"pm.globals.set(\"token\", token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5b2c439b-2891-44d8-af74-44b03e5821ea",
										"exec": [
											"//Test to make sure wrong token is not accepted\r",
											"\r",
											"var token = pm.globals.get(\"token\");\r",
											"\r",
											"if (token.length > 0) {\r",
											"    postman.setNextRequest(\"Negative wrong token\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"token\")\r",
											"   \r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"     pm.response.to.not.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{atoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"page\": \"1\",\r\n        \"per_page\": \"100\",\r\n        \"individual_number\": [\r\n            \"CIL 2003-113-I-247\"\r\n        ]\r\n    }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{project_id}}/individualnumberdetails",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{project_id}}",
										"individualnumberdetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Invalid Project Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cef9a8cf-a821-44d3-8bcf-ff2bc9d73d32",
										"exec": [
											"var project = pm.globals.get(\"project\")\r",
											"\r",
											"if(!project){\r",
											"     project = pm.globals.get(\"invalidproject\");\r",
											"}\r",
											"\r",
											"var currentproject = project.shift();\r",
											"pm.globals.set(\"projectid\", currentproject);\r",
											"pm.globals.set(\"project\", project);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "57beefb5-43e0-4ca5-b833-9d2b3477fa98",
										"exec": [
											"// This negative test will loop through diffrent unauthorized project values and checks if data is being returned or not. It will also check the unauthorized message in the response.\r",
											"\r",
											"var project = pm.globals.get(\"project\");\r",
											"\r",
											"if (project.length > 0) {\r",
											"    postman.setNextRequest(\"Negative Invalid Project Number\")\r",
											"\r",
											"} else {\r",
											"    pm.globals.unset(\"project\")\r",
											"   \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"page\": \"1\",\r\n        \"per_page\": \"100\",\r\n        \"individual_number\": [\r\n            \"CIL 2003-113-I-247\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/{{project_id}}/individualnumberdetails",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"{{project_id}}",
										"individualnumberdetails"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project Individual Number Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9aa8b2bb-94d4-49b5-8963-9df0fa1c4d75",
								"exec": [
									"//This test retrieves individual number details for a specimen based on bone and side.\r",
									"\r",
									"//Test for expected values\r",
									"pm.test(\"Check for expected field values\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\", \"sb_id\",\"user_id\", \"org_id\", \"accession_number\", \"provenance1\", \"provenance2\", \"designator\", \"side\", \"individual_number\");\r",
									"});\r",
									"\r",
									"//Test to check for validity and body\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    tests[\" From: \"  + jsonData.meta.from] = true;\r",
									"    tests[\" To: \"  +jsonData.meta.to] = true;\r",
									"    tests[\" Current Page: \"  + jsonData.meta.current_page] = true;\r",
									"   \r",
									"});\r",
									"\r",
									" \r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(response.links.next !== null) {\r",
									"    var str = response.links.next;\r",
									"    console.log(\"str =\", str);\r",
									"    pm.globals.set(\"page\", str.split('=', 2)[1]);\r",
									"    postman.setNextRequest(\"Project Individual Number Details\");}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"page\": \"1\",\r\n        \"per_page\": \"100\",\r\n        \"individual_number\": [\r\n            \"CIL 2003-113-I-247\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/{{project_id}}/individualnumberdetails",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"{{project_id}}",
								"individualnumberdetails"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "100",
									"disabled": true
								},
								{
									"key": "individual_number[]",
									"value": "CIL+2003-113-I-247",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Specimen Comparision",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Negative Specimen comparision search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d122aa2-6f9e-4c27-9674-399d1d2e85fe",
										"exec": [
											"// This negative test is to pass invalid search criteria with inavlid charaters,numbers and check if the data is being returned or not. Response should not have any data.\r",
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"    })\r",
											"\r",
											"pm.test(\"response must be not valid and not have a body\", function () {\r",
											"     pm.response.to.not.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{anthro_analyst_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reports/projects/2/specimen-comparison?listIds[]={{aspecimen}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reports",
										"projects",
										"2",
										"specimen-comparison"
									],
									"query": [
										{
											"key": "listIds[]",
											"value": "{{aspecimen}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Specimen Comparision Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b602bcf5-85ca-4498-8be8-bda165522798",
								"exec": [
									"pm.test(\"Check for the Lists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var listIds = jsonData.listIds;\r",
									"    pm.expect(jsonData.listIds).to.eql(listIds);\r",
									"});\r",
									"\r",
									"var body = JSON.parse(responseBody);\r",
									"  tests[\" Total Count: \"  + body.meta.total] = true;\r",
									"  tests[\"status =: \" + body.status] = \"success\";\r",
									"  \r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "an",
								"type": "text",
								"value": "CIL 2003-116",
								"disabled": true
							},
							{
								"key": "p1",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"key": "p2",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"key": "sb_select",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"key": "side_select",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/reports/projects/2/specimen-comparison?listIds[]={{specimen}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"projects",
								"2",
								"specimen-comparison"
							],
							"query": [
								{
									"key": "sb_select[]",
									"value": null,
									"disabled": true
								},
								{
									"key": "side_select[]",
									"value": null,
									"disabled": true
								},
								{
									"key": "an",
									"value": null,
									"disabled": true
								},
								{
									"key": "listIds[]",
									"value": "{{specimen}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specimen advance search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25105790-a2bb-4f33-8bdc-ac6f3ea06097",
								"exec": [
									"\r",
									"pm.test(\"Display count of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Count: \"  + jsonData.count] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Display success status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     tests[\" Status: \"  + jsonData.status] = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check returned fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\",\"se_id\",\"org_id\", \"project_id\", \"lab_id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/projects/2/specimens/advanced-search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"2",
								"specimens",
								"advanced-search"
							],
							"query": [
								{
									"key": "an",
									"value": null,
									"disabled": true
								},
								{
									"key": "p1",
									"value": null,
									"disabled": true
								},
								{
									"key": "p2",
									"value": null,
									"disabled": true
								},
								{
									"key": "sb_select[]",
									"value": null,
									"disabled": true
								},
								{
									"key": "side_select[]",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for specimen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c4038fa5-b26f-4750-97bd-05c003a9c892",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anthro_analyst_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"list\": \"true\",\r\n        \"bone[]\": 1,\r\n        \"side[]\": \"Left\"\r\n        \r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/projects/2/specimens/advanced-search?list=true&bone[]=1&side[]=Left",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"2",
								"specimens",
								"advanced-search"
							],
							"query": [
								{
									"key": "list",
									"value": "true"
								},
								{
									"key": "bone[]",
									"value": "1"
								},
								{
									"key": "side[]",
									"value": "Left"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comparison",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "20d85223-e398-472a-9afd-00e31df4049c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "84bf105e-06a5-4cf0-9b62-8b4b645e092b",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status Code\", () => {",
					"  pm.expect(pm.response.code).to.be.oneOf([200,201,403,500,400]);",
					"});",
					"",
					"pm.test(\"Response time is less than 20s\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(20000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "e0e96fbc-0d74-4bcf-aaef-193e426a1fbc",
			"key": "list_ids",
			"value": "25372"
		},
		{
			"id": "fd933c12-2ca5-4719-b771-f6ee5bf9c82a",
			"key": "resultsconfidence",
			"value": "Pending"
		},
		{
			"id": "84d286d0-1ae6-4fbe-9aaf-955655d8b434",
			"key": "proj_ids",
			"value": "0"
		},
		{
			"id": "1d501d4d-35c7-45b9-8a47-8d4fd12d4295",
			"key": "id",
			"value": "2740"
		},
		{
			"id": "caa7c5dd-76e7-4279-8cef-86cefab2d691",
			"key": "accession_number",
			"value": "2020-768"
		},
		{
			"id": "eb5f4977-cdd7-4637-834b-a2a29617adef",
			"key": "provenance1",
			"value": "K-123"
		},
		{
			"id": "e1dad813-f0e5-4ce2-88da-48da23c432d6",
			"key": "provenance2",
			"value": "4567"
		},
		{
			"id": "b63356cc-8582-4220-921e-b5887c9abe9f",
			"key": "bone",
			"value": "Fibula"
		},
		{
			"id": "cbcc4df8-ddcc-48da-aab2-3035286f5617",
			"key": "side",
			"value": "left"
		},
		{
			"id": "2dd902aa-9d63-439e-9d9e-23990d56da7b",
			"key": "key_bone_side",
			"value": ""
		},
		{
			"id": "e9357f63-071b-4ffe-9621-53cc91a9b31e",
			"key": "key",
			"value": ""
		},
		{
			"id": "e609ef2f-c4b8-451b-ae02-1436a5f0303a",
			"key": "name",
			"value": ""
		},
		{
			"id": "a1c2a332-fb34-40bb-9be1-663bb85fdb06",
			"key": "articulated_ck",
			"value": ""
		},
		{
			"id": "969a5677-facb-4ae6-b72b-0656e63f0378",
			"key": "isoproj_ids",
			"value": ""
		},
		{
			"id": "3c678372-51b2-42ce-9e1c-708f21bcf602",
			"key": "individual_number",
			"value": ""
		},
		{
			"id": "3408cbb3-26ac-4281-b80a-9d47a61d6795",
			"key": "mito_sequence_number",
			"value": ""
		},
		{
			"id": "f524a497-3399-421f-8289-d86429c278c5",
			"key": "mito_sequence_count",
			"value": ""
		},
		{
			"id": "57ae6a66-b85d-4784-8252-7052b723bc9b",
			"key": "inumbers",
			"value": ""
		},
		{
			"id": "c29087f8-035c-4273-982e-737f9eda9a67",
			"key": "isoid1",
			"value": "0"
		},
		{
			"id": "e620e04c-efec-45f6-9022-d045785412a5",
			"key": "isoid2",
			"value": "9999"
		},
		{
			"id": "1334c68c-6ac8-41d3-832b-b365320b2442",
			"key": "count",
			"value": ""
		},
		{
			"id": "48398e09-50f5-40c7-a015-e3e41ee9b390",
			"key": "mitoSeq_countBy_inum",
			"value": ""
		},
		{
			"id": "ae222e61-a6f1-4c99-9210-ac41aaf85311",
			"key": "articulated_key_bone_side",
			"value": ""
		},
		{
			"id": "01786bf0-79c9-49ed-a0b7-fba7f1e6775b",
			"key": "anomaly_bone",
			"value": "12"
		},
		{
			"id": "6fb09669-162e-4929-b632-a08ccf5209fd",
			"key": "anomaly_side",
			"value": "Left"
		},
		{
			"id": "761dfd1c-9128-425a-bfad-587952da41a2",
			"key": "method_feature_select[]",
			"value": "578"
		}
	],
	"protocolProfileBehavior": {}
}